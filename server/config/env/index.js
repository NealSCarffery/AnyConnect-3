(function() {
  var _, all, base, fs, path;

  path = require('path');

  _ = require('lodash');

  fs = require('fs');

  path = require('path');

  (base = process.env).NODE_ENV || (base.NODE_ENV = 'development');

  all = {
    env: process.env.NODE_ENV,
    API: {
      JWTSecret: '3E5_^7Z%rH5$%c3jwpQ#uA#O0*k5ltB*zK#yrYFeIScChyHbtW6h&woQM8j49cVU',
      defaultTokenExp: 15 * 60
    },
    server: {
      host: 'localhost',
      port: process.env.PORT || 9000,
      routes: {
        cors: true
      },
      tls: {
        key: fs.readFileSync(path.join(__dirname, '../../ssl/key.pem'), 'utf8'),
        cert: fs.readFileSync(path.join(__dirname, '../../ssl/cert.pem'), 'utf8')
      }
    },
    goodOptions: {
      responsePayload: true,
      reporters: [
        {
          reporter: require('good-console'),
          events: {
            request: '*',
            log: '*',
            response: '*',
            error: '*'
          }
        }
      ]
    },
    mongo: {
      connection: {
        username: 'node',
        password: 'node',
        hostname: 'localhost',
        port: 27019,
        database: 'inspire-me'
      },
      settings: {
        server: {
          socketOptions: {
            keepAlive: 1,
            connectTimeoutMS: 30000
          }
        }
      },
      logDB: {
        username: 'node',
        password: 'node',
        hostname: 'localhost',
        port: 27019,
        database: 'inspire-me',
        collection: 'logs'
      }
    }
  };

  module.exports = _.merge({}, all, require("./" + process.env.NODE_ENV + ".js") || {});

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9lbnYvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBQ1AsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxRQUFSOztFQUNKLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjs7RUFDTCxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O1VBR1AsT0FBTyxDQUFDLElBQUcsQ0FBQyxpQkFBRCxDQUFDLFdBQWE7O0VBRXpCLEdBQUEsR0FDRTtJQUFBLEdBQUEsRUFBSyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQWpCO0lBRUEsR0FBQSxFQUNFO01BQUEsU0FBQSxFQUFXLGtFQUFYO01BQ0EsZUFBQSxFQUFpQixFQUFBLEdBQUssRUFEdEI7S0FIRjtJQU1BLE1BQUEsRUFDRTtNQUFBLElBQUEsRUFBTSxXQUFOO01BQ0EsSUFBQSxFQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBWixJQUFvQixJQUQxQjtNQUVBLE1BQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxJQUFOO09BSEY7TUFJQSxHQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUssRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFWLEVBQXFCLG1CQUFyQixDQUFoQixFQUEyRCxNQUEzRCxDQUFMO1FBQ0EsSUFBQSxFQUFNLEVBQUUsQ0FBQyxZQUFILENBQWdCLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBVixFQUFxQixvQkFBckIsQ0FBaEIsRUFBNEQsTUFBNUQsQ0FETjtPQUxGO0tBUEY7SUFlQSxXQUFBLEVBQ0U7TUFBQSxlQUFBLEVBQWlCLElBQWpCO01BQ0EsU0FBQSxFQUFXO1FBQ1A7VUFBQSxRQUFBLEVBQVUsT0FBQSxDQUFRLGNBQVIsQ0FBVjtVQUNBLE1BQUEsRUFDRTtZQUFBLE9BQUEsRUFBUyxHQUFUO1lBQ0EsR0FBQSxFQUFLLEdBREw7WUFFQSxRQUFBLEVBQVUsR0FGVjtZQUdBLEtBQUEsRUFBTyxHQUhQO1dBRkY7U0FETztPQURYO0tBaEJGO0lBMEJBLEtBQUEsRUFDRTtNQUFBLFVBQUEsRUFDRTtRQUFBLFFBQUEsRUFBVSxNQUFWO1FBQ0EsUUFBQSxFQUFVLE1BRFY7UUFFQSxRQUFBLEVBQVUsV0FGVjtRQUdBLElBQUEsRUFBTSxLQUhOO1FBSUEsUUFBQSxFQUFVLFlBSlY7T0FERjtNQU1BLFFBQUEsRUFDRTtRQUFBLE1BQUEsRUFDRTtVQUFBLGFBQUEsRUFDRTtZQUFBLFNBQUEsRUFBVyxDQUFYO1lBQ0EsZ0JBQUEsRUFBa0IsS0FEbEI7V0FERjtTQURGO09BUEY7TUFXQSxLQUFBLEVBQ0U7UUFBQSxRQUFBLEVBQVUsTUFBVjtRQUNBLFFBQUEsRUFBVSxNQURWO1FBRUEsUUFBQSxFQUFVLFdBRlY7UUFHQSxJQUFBLEVBQU0sS0FITjtRQUlBLFFBQUEsRUFBVSxZQUpWO1FBS0EsVUFBQSxFQUFZLE1BTFo7T0FaRjtLQTNCRjs7O0VBK0NGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxLQUFGLENBQVEsRUFBUixFQUFZLEdBQVosRUFBaUIsT0FBQSxDQUFRLElBQUEsR0FBSyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQWpCLEdBQTBCLEtBQWxDLENBQUEsSUFBMkMsRUFBNUQ7QUF4RGpCIiwiZmlsZSI6ImNvbmZpZy9lbnYvaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5fID0gcmVxdWlyZSgnbG9kYXNoJylcbmZzID0gcmVxdWlyZSgnZnMnKVxucGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuXG4jIGRlZmF1bHQgZW52aXJvbm1lbnQgdG8gZGV2ZWxvcG1lbnQgaWYgZW52aXJvbm1lbnQgdmFyaWFibGUgZG9lc24ndCBleGlzdFxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgb3I9ICdkZXZlbG9wbWVudCdcblxuYWxsID1cbiAgZW52OiBwcm9jZXNzLmVudi5OT0RFX0VOVlxuXG4gIEFQSTpcbiAgICBKV1RTZWNyZXQ6ICczRTVfXjdaJXJINSQlYzNqd3BRI3VBI08wKms1bHRCKnpLI3lyWUZlSVNjQ2h5SGJ0VzZoJndvUU04ajQ5Y1ZVJ1xuICAgIGRlZmF1bHRUb2tlbkV4cDogMTUgKiA2MCAjIGluIHNlY29uZHNcblxuICBzZXJ2ZXI6XG4gICAgaG9zdDogJ2xvY2FsaG9zdCdcbiAgICBwb3J0OiBwcm9jZXNzLmVudi5QT1JUIG9yIDkwMDBcbiAgICByb3V0ZXM6XG4gICAgICBjb3JzOiB0cnVlXG4gICAgdGxzOlxuICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3NzbC9rZXkucGVtJyksICd1dGY4JylcbiAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc3NsL2NlcnQucGVtJyksICd1dGY4JylcblxuICBnb29kT3B0aW9uczpcbiAgICByZXNwb25zZVBheWxvYWQ6IHRydWVcbiAgICByZXBvcnRlcnM6IFtcbiAgICAgICAgcmVwb3J0ZXI6IHJlcXVpcmUoJ2dvb2QtY29uc29sZScpXG4gICAgICAgIGV2ZW50czpcbiAgICAgICAgICByZXF1ZXN0OiAnKidcbiAgICAgICAgICBsb2c6ICcqJ1xuICAgICAgICAgIHJlc3BvbnNlOiAnKidcbiAgICAgICAgICBlcnJvcjogJyonXG4gICAgXVxuXG4gIG1vbmdvOlxuICAgIGNvbm5lY3Rpb246XG4gICAgICB1c2VybmFtZTogJ25vZGUnXG4gICAgICBwYXNzd29yZDogJ25vZGUnXG4gICAgICBob3N0bmFtZTogJ2xvY2FsaG9zdCdcbiAgICAgIHBvcnQ6IDI3MDE5XG4gICAgICBkYXRhYmFzZTogJ2luc3BpcmUtbWUnXG4gICAgc2V0dGluZ3M6XG4gICAgICBzZXJ2ZXI6XG4gICAgICAgIHNvY2tldE9wdGlvbnM6XG4gICAgICAgICAga2VlcEFsaXZlOiAxXG4gICAgICAgICAgY29ubmVjdFRpbWVvdXRNUzogMzAwMDBcbiAgICBsb2dEQjpcbiAgICAgIHVzZXJuYW1lOiAnbm9kZSdcbiAgICAgIHBhc3N3b3JkOiAnbm9kZSdcbiAgICAgIGhvc3RuYW1lOiAnbG9jYWxob3N0J1xuICAgICAgcG9ydDogMjcwMTlcbiAgICAgIGRhdGFiYXNlOiAnaW5zcGlyZS1tZSdcbiAgICAgIGNvbGxlY3Rpb246ICdsb2dzJ1xuXG5cbm1vZHVsZS5leHBvcnRzID0gXy5tZXJnZSh7fSwgYWxsLCByZXF1aXJlKFwiLi8je3Byb2Nlc3MuZW52Lk5PREVfRU5WfS5qc1wiKSBvciB7fSkiXX0=
