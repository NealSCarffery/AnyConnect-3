(function() {
  var _, all, base, path;

  path = require('path');

  _ = require('lodash');

  (base = process.env).NODE_ENV || (base.NODE_ENV = 'development');

  all = {
    env: process.env.NODE_ENV,
    API: {
      JWTSecret: '3E5_^7Z%rH5$%c3jwpQ#uA#O0*k5ltB*zK#yrYFeIScChyHbtW6h&woQM8j49cVU',
      defaultTokenExp: 15 * 60
    },
    server: {
      host: 'localhost',
      port: process.env.PORT || 9000,
      routes: {
        cors: true
      }
    },
    goodOptions: {
      responsePayload: true,
      reporters: [
        {
          reporter: require('good-console'),
          events: {
            request: '*',
            log: '*',
            response: '*',
            error: '*'
          }
        }
      ]
    },
    mongo: {
      connection: {
        username: 'node',
        password: 'node',
        hostname: 'localhost',
        port: 27019,
        database: 'inspire-me'
      },
      settings: {
        server: {
          socketOptions: {
            keepAlive: 1,
            connectTimeoutMS: 30000
          }
        }
      },
      logDB: {
        username: 'node',
        password: 'node',
        hostname: 'localhost',
        port: 27019,
        database: 'inspire-me',
        collection: 'logs'
      }
    }
  };

  module.exports = _.merge(all, require("./" + process.env.NODE_ENV + ".js") || {});

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9lbnYvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBQ1AsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxRQUFSOztVQUdKLE9BQU8sQ0FBQyxJQUFHLENBQUMsaUJBQUQsQ0FBQyxXQUFhOztFQUV6QixHQUFBLEdBQ0U7SUFBQSxHQUFBLEVBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFqQjtJQUVBLEdBQUEsRUFDRTtNQUFBLFNBQUEsRUFBVyxrRUFBWDtNQUNBLGVBQUEsRUFBaUIsRUFBQSxHQUFLLEVBRHRCO0tBSEY7SUFNQSxNQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQU0sV0FBTjtNQUNBLElBQUEsRUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQVosSUFBb0IsSUFEMUI7TUFFQSxNQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sSUFBTjtPQUhGO0tBUEY7SUFZQSxXQUFBLEVBQ0U7TUFBQSxlQUFBLEVBQWlCLElBQWpCO01BQ0EsU0FBQSxFQUFXO1FBQ1A7VUFBQSxRQUFBLEVBQVUsT0FBQSxDQUFRLGNBQVIsQ0FBVjtVQUNBLE1BQUEsRUFDRTtZQUFBLE9BQUEsRUFBUyxHQUFUO1lBQ0EsR0FBQSxFQUFLLEdBREw7WUFFQSxRQUFBLEVBQVUsR0FGVjtZQUdBLEtBQUEsRUFBTyxHQUhQO1dBRkY7U0FETztPQURYO0tBYkY7SUF1QkEsS0FBQSxFQUNFO01BQUEsVUFBQSxFQUNFO1FBQUEsUUFBQSxFQUFVLE1BQVY7UUFDQSxRQUFBLEVBQVUsTUFEVjtRQUVBLFFBQUEsRUFBVSxXQUZWO1FBR0EsSUFBQSxFQUFNLEtBSE47UUFJQSxRQUFBLEVBQVUsWUFKVjtPQURGO01BTUEsUUFBQSxFQUNFO1FBQUEsTUFBQSxFQUNFO1VBQUEsYUFBQSxFQUNFO1lBQUEsU0FBQSxFQUFXLENBQVg7WUFDQSxnQkFBQSxFQUFrQixLQURsQjtXQURGO1NBREY7T0FQRjtNQVdBLEtBQUEsRUFDRTtRQUFBLFFBQUEsRUFBVSxNQUFWO1FBQ0EsUUFBQSxFQUFVLE1BRFY7UUFFQSxRQUFBLEVBQVUsV0FGVjtRQUdBLElBQUEsRUFBTSxLQUhOO1FBSUEsUUFBQSxFQUFVLFlBSlY7UUFLQSxVQUFBLEVBQVksTUFMWjtPQVpGO0tBeEJGOzs7RUE0Q0YsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxHQUFSLEVBQWEsT0FBQSxDQUFRLElBQUEsR0FBSyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQWpCLEdBQTBCLEtBQWxDLENBQUEsSUFBMkMsRUFBeEQ7QUFuRGpCIiwiZmlsZSI6ImNvbmZpZy9lbnYvaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJwYXRoID0gcmVxdWlyZSAncGF0aCdcbl8gPSByZXF1aXJlICdsb2Rhc2gnXG5cbiMgZGVmYXVsdCBlbnZpcm9ubWVudCB0byBkZXZlbG9wbWVudCBpZiBlbnZpcm9ubWVudCB2YXJpYWJsZSBkb2Vzbid0IGV4aXN0XG5wcm9jZXNzLmVudi5OT0RFX0VOViBvcj0gJ2RldmVsb3BtZW50J1xuXG5hbGwgPVxuICBlbnY6IHByb2Nlc3MuZW52Lk5PREVfRU5WXG5cbiAgQVBJOlxuICAgIEpXVFNlY3JldDogJzNFNV9eN1olckg1JCVjM2p3cFEjdUEjTzAqazVsdEIqeksjeXJZRmVJU2NDaHlIYnRXNmgmd29RTThqNDljVlUnXG4gICAgZGVmYXVsdFRva2VuRXhwOiAxNSAqIDYwICMgaW4gc2Vjb25kc1xuXG4gIHNlcnZlcjpcbiAgICBob3N0OiAnbG9jYWxob3N0J1xuICAgIHBvcnQ6IHByb2Nlc3MuZW52LlBPUlQgb3IgOTAwMFxuICAgIHJvdXRlczpcbiAgICAgIGNvcnM6IHRydWVcblxuICBnb29kT3B0aW9uczpcbiAgICByZXNwb25zZVBheWxvYWQ6IHRydWVcbiAgICByZXBvcnRlcnM6IFtcbiAgICAgICAgcmVwb3J0ZXI6IHJlcXVpcmUoJ2dvb2QtY29uc29sZScpXG4gICAgICAgIGV2ZW50czpcbiAgICAgICAgICByZXF1ZXN0OiAnKidcbiAgICAgICAgICBsb2c6ICcqJ1xuICAgICAgICAgIHJlc3BvbnNlOiAnKidcbiAgICAgICAgICBlcnJvcjogJyonXG4gICAgXVxuXG4gIG1vbmdvOlxuICAgIGNvbm5lY3Rpb246XG4gICAgICB1c2VybmFtZTogJ25vZGUnXG4gICAgICBwYXNzd29yZDogJ25vZGUnXG4gICAgICBob3N0bmFtZTogJ2xvY2FsaG9zdCdcbiAgICAgIHBvcnQ6IDI3MDE5XG4gICAgICBkYXRhYmFzZTogJ2luc3BpcmUtbWUnXG4gICAgc2V0dGluZ3M6XG4gICAgICBzZXJ2ZXI6XG4gICAgICAgIHNvY2tldE9wdGlvbnM6XG4gICAgICAgICAga2VlcEFsaXZlOiAxXG4gICAgICAgICAgY29ubmVjdFRpbWVvdXRNUzogMzAwMDBcbiAgICBsb2dEQjpcbiAgICAgIHVzZXJuYW1lOiAnbm9kZSdcbiAgICAgIHBhc3N3b3JkOiAnbm9kZSdcbiAgICAgIGhvc3RuYW1lOiAnbG9jYWxob3N0J1xuICAgICAgcG9ydDogMjcwMTlcbiAgICAgIGRhdGFiYXNlOiAnaW5zcGlyZS1tZSdcbiAgICAgIGNvbGxlY3Rpb246ICdsb2dzJ1xuXG5cbm1vZHVsZS5leHBvcnRzID0gXy5tZXJnZShhbGwsIHJlcXVpcmUoXCIuLyN7cHJvY2Vzcy5lbnYuTk9ERV9FTlZ9LmpzXCIpIG9yIHt9KSJdfQ==
