(function() {
  var _, all, fs, path;

  path = require('path');

  _ = require('lodash');

  fs = require('fs');

  path = require('path');

  all = {
    env: process.env.NODE_ENV,
    API: {
      JWTSecret: '3E5_^7Z%rH5$%c3jwpQ#uA#O0*k5ltB*zK#yrYFeIScChyHbtW6h&woQM8j49cVU',
      defaultTokenExp: 15 * 60
    },
    server: {
      host: 'localhost',
      port: 9000,
      routes: {
        cors: true
      },
      tls: {
        key: fs.readFileSync(path.join(__dirname, '../../ssl/key.pem'), 'utf8'),
        cert: fs.readFileSync(path.join(__dirname, '../../ssl/cert.pem'), 'utf8')
      }
    },
    goodOptions: {
      responsePayload: true,
      reporters: [
        {
          reporter: require('good-console'),
          events: {
            request: '*',
            log: '*',
            response: '*',
            error: '*'
          }
        }
      ]
    },
    mongo: {
      connection: {
        username: 'node',
        password: 'node',
        hostname: '192.168.33.10',
        port: 27017,
        database: 'inspire-me'
      },
      settings: {
        server: {
          socketOptions: {
            keepAlive: 1,
            connectTimeoutMS: 30000
          }
        }
      },
      logDB: {
        username: 'node',
        password: 'node',
        hostname: '192.168.33.10',
        port: 27017,
        database: 'inspire-me',
        collection: 'logs'
      }
    }
  };

  module.exports = _.merge({}, all, require("./" + process.env.NODE_ENV + ".js"));

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9lbnYvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBQ1AsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxRQUFSOztFQUNKLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjs7RUFDTCxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBS1AsR0FBQSxHQUNFO0lBQUEsR0FBQSxFQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBakI7SUFFQSxHQUFBLEVBQ0U7TUFBQSxTQUFBLEVBQVcsa0VBQVg7TUFDQSxlQUFBLEVBQWlCLEVBQUEsR0FBSyxFQUR0QjtLQUhGO0lBTUEsTUFBQSxFQUNFO01BQUEsSUFBQSxFQUFNLFdBQU47TUFDQSxJQUFBLEVBQU0sSUFETjtNQUVBLE1BQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxJQUFOO09BSEY7TUFJQSxHQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUssRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFWLEVBQXFCLG1CQUFyQixDQUFoQixFQUEyRCxNQUEzRCxDQUFMO1FBQ0EsSUFBQSxFQUFNLEVBQUUsQ0FBQyxZQUFILENBQWdCLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBVixFQUFxQixvQkFBckIsQ0FBaEIsRUFBNEQsTUFBNUQsQ0FETjtPQUxGO0tBUEY7SUFlQSxXQUFBLEVBQ0U7TUFBQSxlQUFBLEVBQWlCLElBQWpCO01BQ0EsU0FBQSxFQUFXO1FBQ1A7VUFBQSxRQUFBLEVBQVUsT0FBQSxDQUFRLGNBQVIsQ0FBVjtVQUNBLE1BQUEsRUFDRTtZQUFBLE9BQUEsRUFBUyxHQUFUO1lBQ0EsR0FBQSxFQUFLLEdBREw7WUFFQSxRQUFBLEVBQVUsR0FGVjtZQUdBLEtBQUEsRUFBTyxHQUhQO1dBRkY7U0FETztPQURYO0tBaEJGO0lBMEJBLEtBQUEsRUFDRTtNQUFBLFVBQUEsRUFDRTtRQUFBLFFBQUEsRUFBVSxNQUFWO1FBQ0EsUUFBQSxFQUFVLE1BRFY7UUFFQSxRQUFBLEVBQVUsZUFGVjtRQUdBLElBQUEsRUFBTSxLQUhOO1FBSUEsUUFBQSxFQUFVLFlBSlY7T0FERjtNQU1BLFFBQUEsRUFDRTtRQUFBLE1BQUEsRUFDRTtVQUFBLGFBQUEsRUFDRTtZQUFBLFNBQUEsRUFBVyxDQUFYO1lBQ0EsZ0JBQUEsRUFBa0IsS0FEbEI7V0FERjtTQURGO09BUEY7TUFXQSxLQUFBLEVBQ0U7UUFBQSxRQUFBLEVBQVUsTUFBVjtRQUNBLFFBQUEsRUFBVSxNQURWO1FBRUEsUUFBQSxFQUFVLGVBRlY7UUFHQSxJQUFBLEVBQU0sS0FITjtRQUlBLFFBQUEsRUFBVSxZQUpWO1FBS0EsVUFBQSxFQUFZLE1BTFo7T0FaRjtLQTNCRjs7O0VBOENGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxLQUFGLENBQVEsRUFBUixFQUFZLEdBQVosRUFBaUIsT0FBQSxDQUFRLElBQUEsR0FBSyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQWpCLEdBQTBCLEtBQWxDLENBQWpCO0FBdkRqQiIsImZpbGUiOiJjb25maWcvZW52L2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsicGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5mcyA9IHJlcXVpcmUoJ2ZzJylcbnBhdGggPSByZXF1aXJlKCdwYXRoJylcblxuIyBkZWZhdWx0IGVudmlyb25tZW50IHRvIGRldmVsb3BtZW50IGlmIGVudmlyb25tZW50IHZhcmlhYmxlIGRvZXNuJ3QgZXhpc3RcbiNwcm9jZXNzLmVudi5OT0RFX0VOViBvcj0gJ2RldmVsb3BtZW50J1xuXG5hbGwgPVxuICBlbnY6IHByb2Nlc3MuZW52Lk5PREVfRU5WXG5cbiAgQVBJOlxuICAgIEpXVFNlY3JldDogJzNFNV9eN1olckg1JCVjM2p3cFEjdUEjTzAqazVsdEIqeksjeXJZRmVJU2NDaHlIYnRXNmgmd29RTThqNDljVlUnXG4gICAgZGVmYXVsdFRva2VuRXhwOiAxNSAqIDYwICMgaW4gc2Vjb25kc1xuXG4gIHNlcnZlcjpcbiAgICBob3N0OiAnbG9jYWxob3N0J1xuICAgIHBvcnQ6IDkwMDBcbiAgICByb3V0ZXM6XG4gICAgICBjb3JzOiB0cnVlXG4gICAgdGxzOlxuICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3NzbC9rZXkucGVtJyksICd1dGY4JylcbiAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc3NsL2NlcnQucGVtJyksICd1dGY4JylcblxuICBnb29kT3B0aW9uczpcbiAgICByZXNwb25zZVBheWxvYWQ6IHRydWVcbiAgICByZXBvcnRlcnM6IFtcbiAgICAgICAgcmVwb3J0ZXI6IHJlcXVpcmUoJ2dvb2QtY29uc29sZScpXG4gICAgICAgIGV2ZW50czpcbiAgICAgICAgICByZXF1ZXN0OiAnKidcbiAgICAgICAgICBsb2c6ICcqJ1xuICAgICAgICAgIHJlc3BvbnNlOiAnKidcbiAgICAgICAgICBlcnJvcjogJyonXG4gICAgXVxuXG4gIG1vbmdvOlxuICAgIGNvbm5lY3Rpb246XG4gICAgICB1c2VybmFtZTogJ25vZGUnXG4gICAgICBwYXNzd29yZDogJ25vZGUnXG4gICAgICBob3N0bmFtZTogJzE5Mi4xNjguMzMuMTAnXG4gICAgICBwb3J0OiAyNzAxN1xuICAgICAgZGF0YWJhc2U6ICdpbnNwaXJlLW1lJ1xuICAgIHNldHRpbmdzOlxuICAgICAgc2VydmVyOlxuICAgICAgICBzb2NrZXRPcHRpb25zOlxuICAgICAgICAgIGtlZXBBbGl2ZTogMVxuICAgICAgICAgIGNvbm5lY3RUaW1lb3V0TVM6IDMwMDAwXG4gICAgbG9nREI6XG4gICAgICB1c2VybmFtZTogJ25vZGUnXG4gICAgICBwYXNzd29yZDogJ25vZGUnXG4gICAgICBob3N0bmFtZTogJzE5Mi4xNjguMzMuMTAnXG4gICAgICBwb3J0OiAyNzAxN1xuICAgICAgZGF0YWJhc2U6ICdpbnNwaXJlLW1lJ1xuICAgICAgY29sbGVjdGlvbjogJ2xvZ3MnXG5cbm1vZHVsZS5leHBvcnRzID0gXy5tZXJnZSh7fSwgYWxsLCByZXF1aXJlKFwiLi8je3Byb2Nlc3MuZW52Lk5PREVfRU5WfS5qc1wiKSkiXX0=
